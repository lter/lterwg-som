t.test(beta.m.nocult$beta_roots[land_cover=="forest"],beta.m.nocult$beta_roots[land_cover=="rangeland/grassland"])
t.test(beta.m.nocult$beta_roots[beta.m.nocult$land_cover=="forest"],beta.m.nocult$beta_roots[beta.m.nocult$land_cover=="rangeland/grassland"])
null.mod <- lmer(data=beta.m.gr, beta_soc~(1|layer_bot_max))
full.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + mat + map + (1|layer_bot_max))
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + (1|layer_bot_max))
anova(null.mod, reduced.mod, full.mod)
TukeyHSD(anova(null.mod, reduced.mod, full.mod))
TukeyHSD(aov(null.mod, reduced.mod, full.mod))
Anova(null.mod, reduced.mod, full.mod))
Anova(null.mod, reduced.mod, full.mod)
anova(null.mod, full.mod, reduced.mod)
anova(full.mod, reduced.mod)
anova(null.mod, reduced.mod)
null.mod <- lmer(data=beta.m.for, beta_soc~(1|layer_bot_max))
full.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + mat + map + (1|layer_bot_max))
performance::performance_aicc(full.mod)
full.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + mat + map + clay + (1|layer_bot_max))
performance::performance_aicc(full.mod)
car::vif(full.mod)
performance::r2(full.mod)
full.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + mat + map  + (1|layer_bot_max))
performance::performance_aicc(full.mod)
performance::r2(full.mod)
full.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + mat + map + clay + (1|layer_bot_max))
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + mat + (1|layer_bot_max))
performance::performance_aicc(full.mod)
performance::r2(full.mod)
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + map + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + clay + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + clay +mat + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + clay +map + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ mat +map + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ mat +map +clay + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ mat + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ map + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ mat + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ clay + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ mat + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ map + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ beta_roots + mat + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ mat + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.for, beta_soc ~ map + (1|layer_bot_max))
anova(null.mod, reduced.mod)
null.mod <- lmer(data=beta.m.gr, beta_soc~(1|layer_bot_max))
full.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + mat + map + clay + (1|layer_bot_max))
performance::performance_aicc(full.mod)
performance::r2(full.mod)
full.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + mat + map  + (1|layer_bot_max))
performance::performance_aicc(full.mod)
performance::r2(full.mod)
full.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + mat   + (1|layer_bot_max))
performance::performance_aicc(full.mod)
performance::r2(full.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + mat + clay + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + map + clay + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ mat + map + clay + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ beta_roots + (1|layer_bot_max))
performance::performance_aicc(reduced.mod)
performance::r2(reduced.mod)
anova(null.mod, reduced.mod)
performance::r2(reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ mat + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ map + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ map + mat + (1|layer_bot_max))
anova(null.mod, reduced.mod)
reduced.mod <- lmer(data=beta.m.gr, beta_soc ~ map + mat + clay + (1|layer_bot_max))
anova(null.mod, reduced.mod)
beta.all.for<-filter(beta.all, land_cover=="forest")
beta.all.gr<-filter(beta.all, land_cover=="rangeland/grassland")
#Table S3a: mixed models for beta, organic+mineral, forest and grasslands only
beta.all.nocult<-filter(beta.all, !land_cover %in% c("cultivated","shrubland"))
corr<-lm(data=beta.m.nocult,beta_roots~land_cover)
Anova(corr)
t.test(beta.all.nocult$beta_roots[beta.all.nocult$land_cover=="forest"],beta.all.nocult$beta_roots[beta.all.nocult$land_cover=="rangeland/grassland"])
corr<-lm(data=beta.m.nocult,beta_roots~land_cover)
Anova(corr)
corr<-lm(data=beta.all.nocult,beta_roots~land_cover)
Anova(corr)
# filter to only NEON
somNEON <- filter(som, network == "NEON")
landCov <- select(somNEON, land_cover, site_code)
# useful function for making the DF smaller, only keep variables with not all NA
not_all_na <- function(x) any(!is.na(x))
#subsetting neon sites into groups for easier plotting
neonSiteList1 <- c("BART",
"HARV",
"SCBI",
"SERC",
"BLAN",
"DSNY",
"OSBS",
"JERC",
"LAJA",
"GUAN",
"STEI",
"UNDE",
"TREE",
"UKFS",
"KONZ",
"KONA",
"GRSM",
"MLBS",
"ORNL",
"DELA",
"TALL",
"WOOD",
"DCFS")
# Megapits - creating dataframes for making plots, carbon with depth, roots and soil
# have to include 4 diam because otherwise some sites would be lost
somNEONMegaRoots <- somNEON %>%
filter(data_file%in%c("megapit_roots"),
bgb_upperdiam%in%c("2","4"),
bgb_type == "live") %>%
mutate(bgb_c = ifelse(is.na(bgb_c), 52, bgb_c),
bgb_c_stock = bgb*(bgb_c*.01)) # c_stock is (g root C)/m2
somNEONMegaSoil <- somNEON %>%
filter(data_file%in%c("megapit_soils_all"))
# Putting roots and soil together into one column
somNEONMega <- bind_rows(somNEONMegaRoots, somNEONMegaSoil) %>%
mutate(carbon_stock = ifelse(data_file=="megapit_roots",
bgb_c_stock,
lyr_soc_stock_calc)) %>% #divide by 100 for graphing, but do analyses without dividing by 100; lyr_soc_stock_calc is (g C)/m2
select_if(not_all_na) %>%
arrange(site_code)
sum(is.na(somNEONMega$carbon_stock)) # 6 rows have no C
#subset dfs, half of neon sites
somNEONMega1 <- somNEONMega %>%
filter(site_code%in%neonSiteList1)
somNEONMega2 <- somNEONMega %>%
filter(!site_code%in%neonSiteList1)
# Align root and soil data, need to assign horizon to roots
somNEONMegaRootsSel <- somNEONMegaRoots %>%
select_if(not_all_na)
somNEONMegaSoilSel <- somNEON %>%
filter(data_file%in%c("megapit_soils_all")) %>%
select_if(not_all_na)
## JL loop to assign horizons - takes a min or two to run
results.list = list()
for (site in somNEONMegaRoots$site_code) {
df.roots.oneSite = somNEONMegaRoots %>%
filter(site_code == site)
df.soil.oneSite = somNEONMegaSoil %>%
filter(site_code == site)
site.horizons = c()
# loop through each midpoint for a given site
for (midpoint in df.roots.oneSite$layer_mid) {
midpoint.horizon = NA
# get the horizon for a given midpoint
for (horizon in df.soil.oneSite$hzn) {
df.soil.oneSite.oneHorizon = df.soil.oneSite %>%
filter(hzn == horizon)
if ((midpoint > df.soil.oneSite.oneHorizon$layer_top[1]) &
(midpoint <= df.soil.oneSite.oneHorizon$layer_bot[1])) {
midpoint.horizon = horizon
}
}
# All the horizons for a given site stored in a vector
site.horizons = c(site.horizons, midpoint.horizon)
}
results.list[[site]] = tibble(layer_mid = df.roots.oneSite$layer_mid,
hzn = site.horizons,
site_code = site)
}
horizon.dat = bind_rows(results.list)
# Add horizon to megapit roots, select
somNEONMegaRootsSel <- somNEONMegaRootsSel %>%
left_join(horizon.dat, by = c("site_code", "layer_mid"))
# Sum roots by horizon
somNEONMegaRootsSel.byHor <- somNEONMegaRootsSel %>%
group_by(site_code, hzn) %>%
summarize(bgb_c_stock = sum(bgb_c_stock, na.rm = T))
# Join to soil data - **********USE THIS DF TO COMPARE OTHER EDAPHIC VARS TO ROOTS*************
somNEONMegaSoil.withRoot <- somNEONMegaSoilSel %>%
left_join(somNEONMegaRootsSel.byHor, by = c("site_code", "hzn")) %>%
mutate(hzn_type = ifelse(grepl("^O", hzn), "organic", "mineral"))
# Whole profile summed (summed across combined organic and mineral horizons)
# Covariates are added to the df at a later step.
somNEONMegaSoil.withRoot.Profile <- somNEONMegaSoil.withRoot %>%
group_by(site_code) %>%
summarize(bgb_c_stock_sum = sum(bgb_c_stock, na.rm = T),
lyr_soc_stock_calc_sum = sum(lyr_soc_stock_calc, na.rm = T),
land_cover = first(land_cover),
eco_region = first(eco_region)) %>%
filter(bgb_c_stock_sum > 1)
# Whole profile summed (only for mineral horizons)
# Covariates are added to the df at a later step.
somNEONMegaSoil.withRoot.Profile.min <- somNEONMegaSoil.withRoot %>%
filter(hzn_type=="mineral") %>%
group_by(site_code) %>%
summarize(bgb_c_stock_sum = sum(bgb_c_stock, na.rm = T),
lyr_soc_stock_calc_sum = sum(lyr_soc_stock_calc, na.rm = T),
land_cover = first(land_cover),
eco_region = first(eco_region)) %>%
filter(bgb_c_stock_sum > 1)
#cum sum for root C stocks, contains cumulative fractions for soc & bgb and also whole profile sums
somNEONMegaRootsSelSumDepth <- somNEONMegaRootsSel %>%
left_join(dplyr::select(somNEONMegaSoil.withRoot.Profile, site_code, bgb_c_stock_sum),by="site_code") %>%
mutate(rootfrac = round((bgb_c_stock/bgb_c_stock_sum),2)) %>%
group_by(site_code) %>%
mutate(rootfrac_cumsum = round(cumsum(rootfrac),2))
#cum sum for SOC stocks
somNEONMegaSoilSelSumDepth <- somNEONMegaSoilSel %>%
left_join(dplyr::select(somNEONMegaSoil.withRoot.Profile, site_code, lyr_soc_stock_calc_sum),by="site_code") %>%
mutate(socfrac = round((lyr_soc_stock_calc/lyr_soc_stock_calc_sum),2)) %>%
group_by(site_code) %>%
filter(!is.na(socfrac)) %>%
mutate(socfrac_cumsum = round(cumsum(socfrac),2))
#combine the cumsum dataframes, now root cumsum and soc cumsum are in the same dataframe with exact layer_bot for the measures
somNEONMegaSoilRootSelSumDepth<- somNEONMegaSoilSelSumDepth %>%
rbind(somNEONMegaRootsSelSumDepth) #%>%
#pre-lim quick plots for root beta curves
somNEONMega1 <-  somNEONMegaSoilRootSelSumDepth %>%
filter(site_code%in%neonSiteList1) %>%
arrange(land_cover)
somNEONMega2 <- somNEONMegaSoilRootSelSumDepth %>%
filter(!site_code%in%neonSiteList1)
#Calculating covariates
somNEONMegaSoilRootCovariates <- somNEONMegaSoil.withRoot %>% # somNEONMegaSoilRootSelSumDepth %>%
group_by(site_code) %>%
summarize(mat = mean(mat, na.rm = T),
map = mean(map, na.rm = T),
clay = mean(clay, na.rm=T),
layer_bot_max = max(layer_bot, na.rm=T),
veg_note_profile = first(veg_note_profile))
# Join covariates
somNEONMegaSoilRoot_wholeprofilestats <- somNEONMegaSoil.withRoot.Profile %>%
left_join(somNEONMegaSoilRootCovariates, by="site_code") %>%
filter(!is.na(veg_note_profile))
#Dataframe with site_code, hzn_type, bgb_c_stock_sum, and lyr_soc_stock_calc_sum
somNEONMegaSoil.withRoot.Profile.hzn <- somNEONMegaSoil.withRoot %>%
group_by(site_code, hzn_type) %>%
summarize(bgb_c_stock_sum = sum(bgb_c_stock, na.rm = T),
lyr_soc_stock_calc_sum = sum(lyr_soc_stock_calc, na.rm = T),
land_cover = first(land_cover))
#Grab covariates
somNEONMegaSoilRootCovariates.hzn <- somNEONMegaSoil.withRoot %>%
group_by(site_code, hzn_type) %>%
summarize(mat = mean(mat, na.rm = T),
map = mean(map, na.rm = T),
clay = mean(clay, na.rm=T), #clay is averaged across the whole profile
layer_bot_max = max(layer_bot, na.rm=T)) #max depth is a random effect
#Join the horizon-specific profile sums to the covariate table
somNEONMegaSoil.withRoot.Profile.hzn.stats <- somNEONMegaSoil.withRoot.Profile.hzn %>%
left_join(somNEONMegaSoilRootCovariates.hzn, by=c("site_code", "hzn_type"))
#split the dataframes
somNEON_organic_wholeprofile <- filter(somNEONMegaSoil.withRoot.Profile.hzn.stats, hzn_type=="organic")
somNEON_mineral_wholeprofile <- filter(somNEONMegaSoil.withRoot.Profile.hzn.stats, hzn_type=="mineral")
#Calculating betas for each site
###Y(cumulative percent) = 1- Beta d(depth)
library(minqa)
# a function to calculate root beta for each site
min.rss.roots <- function(beta){
x = somNEONMegaSoilRootSelSumDepth_site$rootfrac_cumsum #I replaced tgc_site with somNEONMegaSoilRootSelSumDepth_site
y = 1-beta^somNEONMegaSoilRootSelSumDepth_site$layer_bot
sum((x-y)^2,na.rm=T)
}
# a function to calculate soil beta for each site
min.rss.soc <- function(beta){
x = somNEONMegaSoilRootSelSumDepth_site$socfrac_cumsum
y = 1-beta^somNEONMegaSoilRootSelSumDepth_site$layer_bot
sum((x-y)^2,na.rm=T)
}
#a loop for calculating betas for each site
results.list = list()
for (site in somNEONMegaSoilRootSelSumDepth$site_code) {
somNEONMegaSoilRootSelSumDepth_site <- filter(somNEONMegaSoilRootSelSumDepth, site_code == site)
beta_site_roots <- bobyqa(0.1,min.rss.roots,0.01,1)$par
beta_site_soc <- bobyqa(0.1,min.rss.soc,0.01,1)$par
lhs <- somNEONMegaSoilRootSelSumDepth_site$rootfrac_cumsum
rhs <- 1-beta_site_roots^somNEONMegaSoilRootSelSumDepth_site$layer_bot
r2_site_roots <- summary(lm(lhs ~ rhs))$r.squared
lhs <- somNEONMegaSoilRootSelSumDepth_site$socfrac_cumsum
rhs <- 1-beta_site_soc^somNEONMegaSoilRootSelSumDepth_site$layer_bot
r2_site_soc <- summary(lm(lhs ~ rhs))$r.squared
results.list[[site]] = tibble(beta_roots = beta_site_roots,
beta_soc = beta_site_soc,
r2_roots = r2_site_roots,
r2_soc = r2_site_soc,
site_code = site)
}
#a loop for calculating betas for each site ****FORCING (0,0)****
somNEONMegaSoilRootSelSumDepthZeros <- somNEONMegaSoilRootSelSumDepth %>%
group_by(site_code) %>%
add_row(rootfrac_cumsum=0, layer_bot=0, socfrac_cumsum=0)
#a loop for calculating betas for each site ****FORCING (0,0)****
somNEONMegaSoilRootSelSumDepthZeros <- somNEONMegaSoilRootSelSumDepth %>%
group_by(site_code) %>%
do(add_row(rootfrac_cumsum=0, layer_bot=0, socfrac_cumsum=0))
#a loop for calculating betas for each site ****FORCING (0,0)****
somNEONMegaSoilRootSelSumDepthZeros <- somNEONMegaSoilRootSelSumDepth %>%
group_by(site_code) %>%
do(add_row(.data=somNEONMegaSoilRootSelSumDepth,rootfrac_cumsum=0, layer_bot=0, socfrac_cumsum=0))
#a loop for calculating betas for each site ****FORCING (0,0)****
write.csv(somNEONMegaSoilRootSelSumDepth, "somNEONMegaSoilRootSelSumDepth.csv")
View(somNEONMegaRootsSelSumDepth)
ggplot(somNEONMega1,
aes(x = socfrac_cumsum,
y = layer_bot )) +
geom_point(pch = 21, color="black") +
geom_point(aes(x=rootfrac_cumsum), color="blue")+
geom_spline(aes(x=rootfrac_cumsum), color="blue")+ #formula = y ~ splines::bs(x, 2)
geom_smooth(method=lm,color="black")+
scale_y_reverse() + # puts 0 at the top
#scale_x_log10() +
facet_wrap(~ land_cover, scales = "free") +
theme_bw() # save 6 x 12
ggplot(somNEONMega1,
aes(x = socfrac_cumsum,
y = layer_bot )) +
geom_point(pch = 21, color="black") +
geom_point(aes(x=rootfrac_cumsum), color="blue")+
#geom_spline(aes(x=rootfrac_cumsum), color="blue")+ #formula = y ~ splines::bs(x, 2)
geom_smooth(method=lm,color="black")+
scale_y_reverse() + # puts 0 at the top
#scale_x_log10() +
facet_wrap(~ land_cover, scales = "free") +
theme_bw() # save 6 x 12
# create first plot of roots and soil with depth
ggplot(somNEONMega2,
aes(x = carbon_stock,
y = layer_bot,
color = data_file)) +
geom_point(pch = 21) +
scale_y_reverse() + # puts 0 at the top
#scale_x_log10() +
facet_wrap(~ site_code, ncol = 8, scales = "free") +
theme_bw() # save 6 x 12
View(somNEONMega2)
# Putting roots and soil together into one column
somNEONMega <- bind_rows(somNEONMegaRoots, somNEONMegaSoil) %>%
mutate(carbon_stock = ifelse(data_file=="megapit_roots",
bgb_c_stock,
lyr_soc_stock_calc)) %>% #divide by 100 for graphing, but do analyses without dividing by 100; lyr_soc_stock_calc is (g C)/m2
select_if(not_all_na) %>%
arrange(site_code)
#subsetting neon sites into groups for easier plotting
neonSiteList1 <- c("BART",
"HARV",
"SCBI",
"SERC",
"BLAN",
"DSNY",
"OSBS",
"JERC",
"LAJA",
"GUAN",
"STEI",
"UNDE",
"TREE",
"UKFS",
"KONZ",
"KONA",
"GRSM",
"MLBS",
"ORNL",
"DELA",
"TALL",
"WOOD",
"DCFS")
# Megapits - creating dataframes for making plots, carbon with depth, roots and soil
# have to include 4 diam because otherwise some sites would be lost
somNEONMegaRoots <- somNEON %>%
filter(data_file%in%c("megapit_roots"),
bgb_upperdiam%in%c("2","4"),
bgb_type == "live") %>%
mutate(bgb_c = ifelse(is.na(bgb_c), 52, bgb_c),
bgb_c_stock = bgb*(bgb_c*.01)) # c_stock is (g root C)/m2
somNEONMegaSoil <- somNEON %>%
filter(data_file%in%c("megapit_soils_all"))
# Putting roots and soil together into one column
somNEONMega <- bind_rows(somNEONMegaRoots, somNEONMegaSoil) %>%
mutate(carbon_stock = ifelse(data_file=="megapit_roots",
bgb_c_stock,
lyr_soc_stock_calc)) %>% #divide by 100 for graphing, but do analyses without dividing by 100; lyr_soc_stock_calc is (g C)/m2
select_if(not_all_na) %>%
arrange(site_code)
sum(is.na(somNEONMega$carbon_stock)) # 6 rows have no C
#subset dfs, half of neon sites
somNEONMega1 <- somNEONMega %>%
filter(site_code%in%neonSiteList1)
somNEONMega2 <- somNEONMega %>%
filter(!site_code%in%neonSiteList1)
# create first plot of roots and soil with depth
ggplot(somNEONMega2,
aes(x = carbon_stock,
y = layer_bot,
color = data_file)) +
geom_point(pch = 21) +
scale_y_reverse() + # puts 0 at the top
#scale_x_log10() +
facet_wrap(~ site_code, ncol = 8, scales = "free") +
theme_bw() # save 6 x 12
#a loop for calculating betas for each site ****FORCING (0,0)****
write.csv(somNEONMegaSoilRootSelSumDepth, "somNEONMegaSoilRootSelSumDepth.csv") #I couldn't figure out add_row with a grouped df, so I opened Excel and did it
somNEONMegaSoilRootSelSumDepth <- read.csv("somNEONMegaSoilRootSelSumDepth.csv")
somNEONMegaSoilRootSelSumDepthZeros <- read.csv("somNEONMegaSoilRootSelSumDepth.csv")
results.list = list()
for (site in somNEONMegaSoilRootSelSumDepthZeros$site_code) {
somNEONMegaSoilRootSelSumDepthZeros_site <- filter(somNEONMegaSoilRootSelSumDepthZeros, site_code == site)
beta_site_roots <- bobyqa(0.1,min.rss.roots,0.01,1)$par
beta_site_soc <- bobyqa(0.1,min.rss.soc,0.01,1)$par
lhs <- somNEONMegaSoilRootSelSumDepthZeros_site$rootfrac_cumsum
rhs <- 1-beta_site_roots^somNEONMegaSoilRootSelSumDepthZeros_site$layer_bot
r2_site_roots <- summary(lm(lhs ~ rhs))$r.squared
lhs <- somNEONMegaSoilRootSelSumDepthZeros_site$socfrac_cumsum
rhs <- 1-beta_site_soc^somNEONMegaSoilRootSelSumDepthZeros_site$layer_bot
r2_site_soc <- summary(lm(lhs ~ rhs))$r.squared
results.list[[site]] = tibble(beta_roots = beta_site_roots,
beta_soc = beta_site_soc,
r2_roots = r2_site_roots,
r2_soc = r2_site_soc,
site_code = site)
}
beta.all.zeros <- bind_rows(results.list)
View(beta.all.zeros)
plot(beta.al.zerosl$beta_roots,beta.all.zeros$beta_soc)
plot(beta.al.zeros$beta_roots,beta.all.zeros$beta_soc)
plot(beta.all.zeros$beta_roots,beta.all.zeros$beta_soc)
beta.all.zeros$beta_soc
beta.all.zeros$beta_roots
View(somNEONMegaSoilRootSelSumDepthZeros)
# a function to calculate root beta for each site with Zeros
min.rss.roots.zeros <- function(beta){
x = somNEONMegaSoilRootSelSumDepthZeros_site$rootfrac_cumsum #I replaced tgc_site with somNEONMegaSoilRootSelSumDepth_site
y = 1-beta^somNEONMegaSoilRootSelSumDepthZeros_site$layer_bot
sum((x-y)^2,na.rm=T)
}
# a function to calculate soil beta for each site
min.rss.soc.zeros <- function(beta){
x = somNEONMegaSoilRootSelSumDepthZeros_site$socfrac_cumsum
y = 1-beta^somNEONMegaSoilRootSelSumDepthZeros_site$layer_bot
sum((x-y)^2,na.rm=T)
}
results.list = list()
for (site in somNEONMegaSoilRootSelSumDepthZeros$site_code) {
somNEONMegaSoilRootSelSumDepthZeros_site <- filter(somNEONMegaSoilRootSelSumDepthZeros, site_code == site)
beta_site_roots <- bobyqa(0.1,min.rss.roots.zeros,0.01,1)$par
beta_site_soc <- bobyqa(0.1,min.rss.soc.zeros,0.01,1)$par
lhs <- somNEONMegaSoilRootSelSumDepthZeros_site$rootfrac_cumsum
rhs <- 1-beta_site_roots^somNEONMegaSoilRootSelSumDepthZeros_site$layer_bot
r2_site_roots <- summary(lm(lhs ~ rhs))$r.squared
lhs <- somNEONMegaSoilRootSelSumDepthZeros_site$socfrac_cumsum
rhs <- 1-beta_site_soc^somNEONMegaSoilRootSelSumDepthZeros_site$layer_bot
r2_site_soc <- summary(lm(lhs ~ rhs))$r.squared
results.list[[site]] = tibble(beta_roots = beta_site_roots,
beta_soc = beta_site_soc,
r2_roots = r2_site_roots,
r2_soc = r2_site_soc,
site_code = site)
}
beta.all.zeros <- bind_rows(results.list)
View(beta.all.zeros)
plot(beta.all.zeros$beta_roots,beta.all.zeros$beta_soc)
write.csv(beta.all.M, "beta.all.zeros_052820.csv")
write.csv(beta.all.zeros, "beta.all.zeros_052820.csv")
beta.all.zeros<-beta.all.zeros %>%
left_join(somNEONMegaSoilRootCovariates.ldcv, by= "site_code")#%>%
beta.all.zeros <- bind_rows(results.list)
View(beta.all.zeros)
beta.all.zeros<-beta.all.zeros %>%
left_join(somNEONMegaSoilRootCovariates.ldcv, by= "site_code")%>%
filter(!site_code%in%c("CLBJ","JORN","GUAN","LAJA","GRSM","TEAK","BARR")) #these sites have betaSOC = 0.1
#Adding covariates and making a csv file to store the beta values
somNEONMegaSoilRootCovariates.ldcv <- somNEONMegaSoilRootCovariates %>%
left_join(select(somNEONMega, land_cover, site_code), by="site_code") %>%
group_by(site_code) %>%
summarize(land_cover = first(land_cover),
mat = mean(mat),
map = mean(map),
clay = mean(clay),
layer_bot_max = mean(layer_bot_max))
beta.all.zeros<-beta.all.zeros %>%
left_join(somNEONMegaSoilRootCovariates.ldcv, by= "site_code")%>%
filter(!site_code%in%c("CLBJ","JORN","GUAN","LAJA","GRSM","TEAK","BARR")) #these sites have betaSOC = 0.1
write.csv(beta.all.zeros, "beta.all.zeros_052820.csv")
